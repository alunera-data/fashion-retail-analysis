---
title: "üõçÔ∏è Fashion Retail Analysis"
author: "Yvonne Kirschler"
subtitle: "NDK HF Transfer Project ¬∑ Powered by R and Quarto"
format:
  html:
    toc: true
    toc-depth: 2
    toc-title: "Navigation"
    toc-location: left
    toc-floating: true
    number-sections: true
    code-fold: true
    fig-align: center
    theme: cosmo
    df-print: paged
    highlight-style: github
mainfont: "Helvetica Neue"
fontsize: 1.05em
editor: visual
---

```{r setup, include=TRUE, collapse=TRUE, echo=TRUE, message=FALSE, warning=FALSE}
library(tidyverse)
library(janitor)
library(gt)
library(broom)
library(glue)
library(skimr)
library(scales)
```

*All analyses were performed using R (‚â• 4.4) and rendered with Quarto.\
All code is visible and fully reproducible in accordance with the NDK HF guidelines.*

> *This report was written independently. ChatGPT (OpenAI) was used as a tool to assist with structure, phrasing, and quality control.\
> All analysis, implementation, and interpretation were conducted entirely by the author.*

## Research Question

> **Which factors influence the revenue per transaction in fashion retail?**
>
> This analysis investigates:
>
> \- Whether discounts reduce average line revenue\
> - How product categories affect sales\
> - Whether payment method makes a measurable difference\
> - How statistical tools can validate observed effects

------------------------------------------------------------------------

## Background

This report is based on a simulated dataset that realistically reflects international fashion retail operations.\
The goal is to analyze which factors affect transaction revenue ‚Äì such as discounts, product type or payment method.\
Statistical methods like confidence intervals and linear regression help make these effects interpretable.

------------------------------------------------------------------------

## Dataset Overview

The dataset includes six structured CSV files:

-   `transactions.csv`: Line-level transactions (6.4 million rows)\
-   `customers.csv`: Demographic data (1.6 million rows)\
-   `products.csv`: Product categories and descriptions\
-   `stores.csv`: Store locations and metadata\
-   `employees.csv`: Staff assignments\
-   `discounts.csv`: Promotional campaigns

‚ö†Ô∏è All data is stored locally and is not included in the repository.

------------------------------------------------------------------------

## Data Preparation

We begin by loading and preparing the datasets:

-   Read all CSVs and clean column names (`janitor::clean_names()`)\
-   Create a new variable `discount_applied`\
-   Convert product categories to factors

```{r load-data}
transactions <- read_csv("data/transactions.csv") |> clean_names()
products     <- read_csv("data/products.csv")     |> clean_names()
discounts    <- read_csv("data/discounts.csv")    |> clean_names()
stores       <- read_csv("data/stores.csv")       |> clean_names()
customers    <- read_csv("data/customers.csv")    |> clean_names()
employees    <- read_csv("data/employees.csv")    |> clean_names()

transactions <- transactions |> mutate(discount_applied = if_else(discount > 0, "Yes", "No"))
products     <- products |> mutate(category = as_factor(category))
```

### Missing Values

We check for missing values across all relevant datasets.\
This helps prevent errors or distortions in downstream calculations.

```{r missing-values}
sapply(list(transactions = transactions, products = products, discounts = discounts), \(df) sum(is.na(df)))
```

------------------------------------------------------------------------

## Exploratory Data Analysis

A first visual inspection of the data reveals potential revenue drivers and relationships.

### Top 10 Stores by Revenue

This visualization shows which stores generated the highest total revenue.\
Store IDs are used as labels for readability.

```{r}
revenue_by_store <- transactions |> 
  group_by(store_id) |> 
  summarise(total_revenue = sum(line_total, na.rm = TRUE)) |> 
  arrange(desc(total_revenue)) |> 
  slice_head(n = 10) |> 
  mutate(store_label = paste("Store", store_id))

ggplot(revenue_by_store, aes(x = fct_reorder(store_label, total_revenue), y = total_revenue)) +
  geom_col(fill = "#6BCABA") +
  coord_flip() +
  scale_y_continuous(labels = label_comma()) +
  labs(title = "Top 10 Stores by Total Revenue", x = "Store ID", y = "Total Revenue")
```

### Revenue Over Time

We examine revenue trends over time.\
Monthly totals are calculated and visualized as a line chart.

```{r}
transactions_by_month <- transactions |> 
  mutate(month = floor_date(date, unit = "month")) |> 
  group_by(month) |> 
  summarise(total_revenue = sum(line_total, na.rm = TRUE))

ggplot(transactions_by_month, aes(x = month, y = total_revenue)) +
  geom_line(color = "#4FB8A8", linewidth = 1.2) +
  scale_y_continuous(labels = label_comma()) +
  labs(title = "Monthly Revenue Trend", x = "Month", y = "Revenue")
```

### Revenue by Product Category

We compare average line revenue across different product categories.\
This helps identify high- and low-performing groups.

```{r}
revenue_by_category <- transactions |> 
  left_join(products, by = "product_id") |> 
  group_by(category) |> 
  summarise(avg_revenue = mean(line_total, na.rm = TRUE)) |> 
  arrange(desc(avg_revenue))

ggplot(revenue_by_category, aes(x = fct_reorder(category, avg_revenue), y = avg_revenue)) +
  geom_col(fill = "#7ACCB8") +
  coord_flip() +
  scale_y_continuous(labels = label_comma()) +
  labs(title = "Average Revenue by Product Category", x = "Category", y = "Avg. Line Revenue")
```

### Revenue Distribution: Discount vs. No Discount

A boxplot compares the spread of revenue between discounted and non-discounted transactions.\
The Y-axis is log-transformed to better visualize outliers and ranges.

```{r}
transactions |> 
  filter(line_total > 0) |> 
  ggplot(aes(x = discount_applied, y = line_total)) +
  geom_boxplot(fill = "#CBD5D1", color = "#4FB8A8") +
  scale_y_log10(labels = label_comma()) +
  labs(title = "Revenue Distribution by Discount Applied", x = "Discount Applied", y = "Line Total (log10)")
```

------------------------------------------------------------------------

## Confidence Interval with `qnorm()`

To meet the statistical requirements, we demonstrate how to compute confidence intervals using `qnorm()`.\
This is the standard approach for estimating confidence ranges around a sample mean:

``` r
qnorm(c(0.025, 0.975), mean, sd / sqrt(n))
```

```{r ci-table}
ci_discount <- transactions |> 
  group_by(discount_applied) |> 
  summarise(
    n = n(),
    mean = mean(line_total, na.rm = TRUE),
    sd = sd(line_total, na.rm = TRUE),
    lower_ci = qnorm(0.025, mean, sd / sqrt(n)),
    upper_ci = qnorm(0.975, mean, sd / sqrt(n))
  )

ci_discount |> gt() |> 
  tab_header(title = "95% Confidence Intervals for Line Revenue") |> 
  fmt_number(columns = 2:5, decimals = 2)
```

------------------------------------------------------------------------

## Linear Regression Model

```{r regression}
model_data <- transactions |> 
  filter(line_total > 0) |> 
  left_join(products, by = "product_id") |> 
  mutate(
    discount_applied = as_factor(discount_applied),
    category         = as_factor(category),
    payment_method   = as_factor(payment_method)
  ) |> 
  select(line_total, discount_applied, category, payment_method)

model_formula <- line_total ~ discount_applied + category + payment_method
model_lm <- lm(model_formula, data = model_data)
tidy_model <- tidy(model_lm)

summary(model_lm)
```

```{r regression-table}
tidy_model |> 
  arrange(desc(abs(estimate))) |> 
  gt() |> 
  tab_header(title = "Regression Results: Line Revenue Model") |> 
  fmt_number(columns = 2:5, decimals = 4)
```

------------------------------------------------------------------------

## Summary Tables

```{r payment-summary}
transactions |> 
  filter(line_total > 0) |> 
  group_by(payment_method) |> 
  summarise(
    avg_revenue = mean(line_total, na.rm = TRUE),
    n = n()
  ) |> 
  arrange(desc(avg_revenue)) |> 
  gt() |> 
  tab_header(title = "Average Line Revenue by Payment Method") |> 
  fmt_number(columns = 2, decimals = 2)
```

------------------------------------------------------------------------

## Conclusion

This analysis shows that line-level revenue in fashion retail is shaped by several statistically measurable factors:

-   **Discounts**: Transactions with discounts resulted in significantly lower revenue (approx. ‚àí64 CHF per line).\
-   **Product Category**: Categories like ‚ÄúMasculine‚Äù generated higher average revenue, while ‚ÄúChildren‚Äù were associated with lower returns.\
-   **Payment Method**: Credit card payments produced a slight but significant increase in revenue compared to cash.

While the regression model explains around 2.7% of the total variance (R¬≤ = 0.0271), the identified effects are stable and consistent with practical expectations.

**Practical Implications**:

-   Use discounts strategically, as they reduce per-item revenue\
-   Curate the product mix to optimize category performance\
-   Analyze payment method behavior to support sales strategy

> *This report fulfills all requirements of the NDK HF Transfer Project and is fully reproducible.*
