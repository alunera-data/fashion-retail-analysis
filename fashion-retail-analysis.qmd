---
title: "üõçÔ∏è Fashion Retail Analysis"
author: "Yvonne Kirschler"
subtitle: "NDK HF Transfer Project ¬∑ Created with R and Quarto"
format:
  html:
    toc: true
    toc-depth: 2
    toc-title: "Navigation"
    toc-location: left
    toc-floating: true
    number-sections: true
    code-fold: true
    fig-align: center
    theme: cosmo
    df-print: paged
    highlight-style: github
    embed-resources: true
mainfont: "Helvetica Neue"
fontsize: 1.05em
editor: visual
---

```{r setup, include=TRUE, collapse=TRUE, echo=TRUE, message=FALSE, warning=FALSE}
library(tidyverse)
library(janitor)
library(gt)
library(broom)
library(glue)
library(skimr)
library(scales)
```

*All analyses were conducted using R (‚â• 4.4) and rendered with Quarto.\
All code is visible and reproducible in accordance with NDK HF guidelines.*

> *This report was written independently. ChatGPT (OpenAI) was used to support structure, phrasing, and quality control.\
> All analysis, implementation and interpretation were carried out entirely by the author.*

## Research Question

**Which factors influence revenue per transaction in fashion retail?**

This project investigates:

-   Whether discounts reduce average transaction revenue\
-   How product categories affect sales\
-   Whether payment method has a measurable impact\
-   How these effects can be validated statistically

## Background

This report is based on a synthetic dataset that closely simulates global fashion retail operations.\
The goal is to analyze factors that impact revenue per transaction ‚Äì such as discount usage, product type, and payment method.\
Statistical methods like confidence intervals and regression models are applied to uncover these patterns.

## Dataset Overview

The dataset includes six structured CSV files:

-   `transactions.csv`: Transaction records (\~6.4 million rows)\
-   `customers.csv`: Customer demographic information\
-   `products.csv`: Product categories and descriptions\
-   `stores.csv`: Store locations and metadata\
-   `employees.csv`: Staff assignments\
-   `discounts.csv`: Promotional campaigns

‚ö†Ô∏è The data is stored locally and is not included in the repository.

## Data Preparation

```{r load-data}
transactions <- read_csv("data/transactions.csv", show_col_types = FALSE) |> clean_names()
products     <- read_csv("data/products.csv", show_col_types = FALSE)     |> clean_names()
discounts    <- read_csv("data/discounts.csv", show_col_types = FALSE)    |> clean_names()
stores       <- read_csv("data/stores.csv", show_col_types = FALSE)       |> clean_names()
customers    <- read_csv("data/customers.csv", show_col_types = FALSE)    |> clean_names()
employees    <- read_csv("data/employees.csv", show_col_types = FALSE)    |> clean_names()

transactions <- transactions |> mutate(discount_applied = if_else(discount > 0, "Yes", "No"))
products     <- products |> mutate(category = as_factor(category))
```

### Missing Values

We check for missing values across the main datasets.\
This is important to ensure valid calculations and prevent bias in averages or model outputs.

```{r missing-values}
sapply(list(transactions = transactions, products = products, discounts = discounts), \(df) sum(is.na(df)))
```

## Exploratory Analysis

### Top 10 Stores by Revenue

```{r}
revenue_by_store <- transactions |> 
  group_by(store_id) |> 
  summarise(total_revenue = sum(line_total, na.rm = TRUE)) |> 
  arrange(desc(total_revenue)) |> 
  slice_head(n = 10) |> 
  mutate(store_label = paste("Store", store_id))

ggplot(revenue_by_store, aes(x = fct_reorder(store_label, total_revenue), y = total_revenue)) +
  geom_col(fill = "#6BCABA") +
  coord_flip() +
  scale_y_continuous(labels = label_comma()) +
  labs(title = "Top 10 Stores by Total Revenue", x = "Store ID", y = "Total Revenue")
```

### Monthly Revenue Trend

```{r}
transactions_by_month <- transactions |> 
  mutate(month = floor_date(date, unit = "month")) |> 
  group_by(month) |> 
  summarise(total_revenue = sum(line_total, na.rm = TRUE))

ggplot(transactions_by_month, aes(x = month, y = total_revenue)) +
  geom_line(color = "#4FB8A8", linewidth = 1.2) +
  scale_y_continuous(labels = label_comma()) +
  labs(title = "Monthly Revenue Trend", x = "Month", y = "Revenue")
```

### Average Revenue by Product Category

```{r}
revenue_by_category <- transactions |> 
  left_join(products, by = "product_id") |> 
  group_by(category) |> 
  summarise(avg_revenue = mean(line_total, na.rm = TRUE)) |> 
  arrange(desc(avg_revenue))

ggplot(revenue_by_category, aes(x = fct_reorder(category, avg_revenue), y = avg_revenue)) +
  geom_col(fill = "#7ACCB8") +
  coord_flip() +
  scale_y_continuous(labels = label_comma()) +
  labs(title = "Average Revenue by Product Category", x = "Product Category", y = "Average Revenue")
```

### Revenue Distribution: Discount vs. No Discount

```{r}
transactions |> 
  filter(line_total > 0) |> 
  ggplot(aes(x = discount_applied, y = line_total)) +
  geom_boxplot(fill = "#CBD5D1", color = "#4FB8A8") +
  scale_y_log10(labels = label_comma()) +
  labs(title = "Revenue Distribution by Discount Applied", x = "Discount Applied", y = "Revenue (log10)")
```

### Revenue vs. Store Size (Scatterplot)

```{r}
revenue_by_store_size <- transactions |> 
  group_by(store_id) |> 
  summarise(total_revenue = sum(line_total, na.rm = TRUE)) |> 
  mutate(store_id = as.numeric(as.character(store_id))) |> 
  left_join(stores, by = "store_id")

ggplot(revenue_by_store_size, aes(x = number_of_employees, y = total_revenue)) +
  geom_point(alpha = 0.6, color = "#6BCABA", size = 2) +
  scale_y_continuous(labels = label_comma()) +
  labs(title = "Revenue by Store Size", x = "Number of Employees", y = "Total Revenue")
```

## Confidence Interval using `qnorm()`

We calculate 95% confidence intervals using the standard formula:

``` r
qnorm(c(0.025, 0.975), mean, sd / sqrt(n))
```

```{r ci-table}
ci_discount <- transactions |> 
  group_by(discount_applied) |> 
  summarise(
    n = n(),
    mean = mean(line_total, na.rm = TRUE),
    sd = sd(line_total, na.rm = TRUE),
    lower_ci = qnorm(0.025, mean, sd / sqrt(n)),
    upper_ci = qnorm(0.975, mean, sd / sqrt(n))
  )

ci_discount |> 
  rename(std_dev = sd) |> 
  gt() |> 
  tab_header(title = "95% Confidence Intervals for Revenue per Transaction") |> 
  fmt_number(columns = 2:6, decimals = 2)
```

## Linear Regression Model

```{r regression}
model_data <- transactions |> 
  filter(line_total > 0) |> 
  left_join(products, by = "product_id") |> 
  mutate(
    discount_applied = as_factor(discount_applied),
    category         = as_factor(category),
    payment_method   = as_factor(payment_method)
  ) |> 
  select(line_total, discount_applied, category, payment_method)

model_formula <- line_total ~ discount_applied + category + payment_method
model_lm <- lm(model_formula, data = model_data)
tidy_model <- tidy(model_lm)

summary(model_lm)
```

```{r regression-table}
tidy_model |> 
  arrange(desc(abs(estimate))) |> 
  gt() |> 
  tab_header(title = "Regression Results: Line Revenue Model") |> 
  fmt_number(columns = 2:5, decimals = 4)
```

## Summary Table by Payment Method

```{r payment-summary}
transactions |> 
  filter(line_total > 0) |> 
  group_by(payment_method) |> 
  summarise(
    avg_revenue = mean(line_total, na.rm = TRUE),
    n = n()
  ) |> 
  arrange(desc(avg_revenue)) |> 
  gt() |> 
  tab_header(title = "Average Revenue per Transaction by Payment Method") |> 
  fmt_number(columns = 2, decimals = 2)
```

## Conclusion

This analysis shows that revenue per transaction in fashion retail is not random, but driven by several statistically measurable factors:

-   **Discounts** significantly lower the revenue per transaction (approx. ‚àí64 CHF)\
-   **Product categories** like ‚ÄúMasculine‚Äù result in higher average sales than others\
-   **Payment methods** like credit cards produce slightly higher revenues

The linear model explains about **2.7% of total variance** ‚Äì a realistic value for transactional business data.

### Practical Implications:

-   Use discounts strategically to avoid unnecessary revenue loss\
-   Optimize the product mix based on data-driven category insights\
-   Consider payment methods when planning pricing or promotions

> *This report fulfills all requirements of the NDK HF Transfer Project and is fully reproducible.*
